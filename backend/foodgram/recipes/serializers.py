from collections import OrderedDict

from rest_framework import serializers
from .models import Recipe, RecipeIngredient, Ingredient
from .utils import Base64ImageField


class IngredientInRecipeWriteSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–∞."""
    id = serializers.IntegerField()
    amount = serializers.IntegerField(min_value=1)

    class Meta:
        model = RecipeIngredient
        fields = ("id", "amount")


class IngredientInRecipeReadSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è RecipeIngredient."""
    id = serializers.IntegerField(source="ingredient.id")
    name = serializers.CharField(source="ingredient.name")
    measurement_unit = serializers.CharField(source="ingredient.measurement_unit")
    amount = serializers.IntegerField()

    class Meta:
        model = RecipeIngredient
        fields = ("id", "name", "measurement_unit", "amount")


class RecipeCreateSerializer(serializers.ModelSerializer):
    # –ü–æ–ª–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    ingredients = IngredientInRecipeWriteSerializer(many=True, write_only=True)
    # –ü–æ–ª–µ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
    ingredients_read = serializers.SerializerMethodField(read_only=True)

    image = Base64ImageField()

    author = serializers.SerializerMethodField(read_only=True)

    class Meta:
        model = Recipe
        fields = ("id", "author", "ingredients", "ingredients_read", "image", "name", "text", "cooking_time")

    def to_representation(self, instance):
        data = super().to_representation(instance)
        data['is_favorited'] = True
        data['is_in_shopping_cart'] = True
        print("üî• to_representation –≤—ã–∑–≤–∞–Ω!")  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ª–∏ –º–µ—Ç–æ–¥
        return data

    def validate_ingredients(self, ingredients):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –Ω–µ –ø—É—Å—Ç, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç."""
        if not ingredients:
            raise serializers.ValidationError("–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç.")

        ingredient_ids = [ingredient["id"] for ingredient in ingredients]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if len(ingredient_ids) != len(set(ingredient_ids)):
            raise serializers.ValidationError("–í —Ä–µ—Ü–µ–ø—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.")

        existing_ingredients = Ingredient.objects.filter(id__in=ingredient_ids).values_list("id", flat=True)
        missing_ingredients = set(ingredient_ids) - set(existing_ingredients)
        if missing_ingredients:
            raise serializers.ValidationError(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {missing_ingredients}")

        return ingredients

    def validate_cooking_time(self, value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –Ω–µ –º–µ–Ω—å—à–µ 1 –º–∏–Ω—É—Ç—ã."""
        if value < 1:
            raise serializers.ValidationError("–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞.")
        return value

    def get_author(self, obj):
        """–§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–≤—Ç–æ—Ä–µ."""
        user = obj.author
        return {
            "email": user.email,
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_subscribed": False,  # –ü–æ–¥–ø–∏—Å–∏ –ø–æ –∂–µ–ª–∞–Ω–∏—é
            "avatar": user.avatar.url if user.avatar else None
        }

    def get_ingredients_read(self, obj):
        # obj -- —ç—Ç–æ Recipe
        recipe_ingredients = obj.recipe_ingredients.all()  # –ü–æ–ª—É—á–∞–µ–º RecipeIngredient
        return IngredientInRecipeReadSerializer(recipe_ingredients, many=True).data

    def create(self, validated_data):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞."""
        ingredients_data = validated_data.pop("ingredients")
        recipe = Recipe.objects.create(**validated_data)

        # –°–æ–∑–¥–∞–µ–º RecipeIngredient
        recipe_ingredients = []
        for ingredient_data in ingredients_data:
            ingredient_obj = Ingredient.objects.get(id=ingredient_data["id"])
            recipe_ingredients.append(
                RecipeIngredient(
                    recipe=recipe,
                    ingredient=ingredient_obj,
                    amount=ingredient_data["amount"]
                )
            )
        RecipeIngredient.objects.bulk_create(recipe_ingredients)

        return recipe

    def update(self, instance, validated_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ (PATCH/PUT)."""
        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
        ingredients_data = validated_data.pop("ingredients", None)

        if "ingredients" in validated_data and not validated_data["ingredients"]:
            raise serializers.ValidationError({"ingredients": "–†–µ—Ü–µ–ø—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç."})

        if ingredients_data is not None:
            ingredient_ids = [ingredient["id"] for ingredient in ingredients_data]
            existing_ingredients = Ingredient.objects.filter(id__in=ingredient_ids).values_list("id", flat=True)

            missing_ingredients = set(ingredient_ids) - set(existing_ingredients)
            if missing_ingredients:
                raise serializers.ValidationError(
                    {"ingredients": f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç: {missing_ingredients}"})

            if len(ingredient_ids) != len(set(ingredient_ids)):
                raise serializers.ValidationError(
                    {"ingredients": "–í —Ä–µ—Ü–µ–ø—Ç–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤."})

            if "cooking_time" in validated_data and validated_data["cooking_time"] < 1:
                raise serializers.ValidationError({"cooking_time": "–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞."})

        # 2. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ä–µ—Ü–µ–ø—Ç–∞ (name, text, image, cooking_time, –∏ —Ç.–¥.)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        # 3. –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –ø—Ä–∏—à–ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        if ingredients_data is not None:
            RecipeIngredient.objects.filter(recipe=instance).delete()
            new_ri = []
            for ingredient_data in ingredients_data:
                ingredient_obj = Ingredient.objects.get(id=ingredient_data["id"])
                new_ri.append(
                    RecipeIngredient(
                        recipe=instance,
                        ingredient=ingredient_obj,
                        amount=ingredient_data["amount"]
                    )
                )
            RecipeIngredient.objects.bulk_create(new_ri)

        return instance

    def to_representation(self, instance):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ (GET)."""
        # –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤—Å—é –º–æ–¥–µ–ª—å Recipe —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ
        ret = super().to_representation(instance)

        # –ó–∞–º–µ–Ω–∏–º –ø–æ–ª–µ 'ingredients' –≤ –≤—ã–≤–æ–¥–µ –Ω–∞ 'ingredients_read'
        ret["ingredients"] = ret.pop("ingredients_read")
        return ret


class RecipeReadSerializer(serializers.ModelSerializer):
    """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ—Ü–µ–ø—Ç–µ."""
    author = serializers.SerializerMethodField()
    ingredients = serializers.SerializerMethodField()
    image = Base64ImageField()
    is_favorited = serializers.SerializerMethodField()
    is_in_shopping_cart = serializers.SerializerMethodField()

    class Meta:
        model = Recipe
        fields = (
            "id", "author", "ingredients",
            "is_favorited", "is_in_shopping_cart",
            "name", "image", "text", "cooking_time"
        )

    def get_author(self, obj):
        user = obj.author
        return {
            "id": user.id,
            "email": user.email,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
            "is_subscribed": False,
            "avatar": user.avatar.url if user.avatar else None,
        }

    def get_ingredients(self, obj):
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ RecipeIngredient –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
        recipe_ingredients = obj.recipe_ingredients.all()
        return IngredientInRecipeReadSerializer(recipe_ingredients, many=True).data

    def get_is_favorited(self, obj):
        return True

    def get_is_in_shopping_cart(self, obj):
        return True




