services:

  frontend:
    container_name: foodgram-front
    image: ${DOCKER_USERNAME}/foodgram-frontend:latest  # Используем переменную окружения
    restart: always

  nginx:
    container_name: foodgram-proxy
    image: nginx:1.25.4-alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ../frontend/build:/usr/share/nginx/html/
      - ../docs/:/usr/share/nginx/html/api/docs/
      - media_volume:/usr/share/nginx/html/media/
    depends_on:
      - backend

  db:
    container_name: foodgram-db
    image: postgres:13
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init/:/docker-entrypoint-initdb.d/
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      retries: 5
      timeout: 3s

  backend:
    container_name: foodgram-backend
    image: ${DOCKER_USERNAME}/foodgram-backend:latest  # Используем переменную окружения
    restart: always
    depends_on:
      db:
        condition: service_healthy
    environment:
      DEBUG: ${DEBUG}
      SECRET_KEY: ${SECRET_KEY}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
    ports:
      - "8000:8000"
    volumes:
      - media_volume:/app/foodgram/media

volumes:
  pg_data:
  media_volume:
